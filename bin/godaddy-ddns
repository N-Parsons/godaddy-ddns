#!/usr/bin/env python3

import sys
import warnings

import click

import godaddy_ddns


@click.command()
@click.option(
    '--config', '-c',
    default="/etc/godaddy-ddns/config.yaml",
    help="Path to configuration file (.yaml).",
    type=click.File('r')
)
@click.option('--force', '-f', is_flag=True, help="Update the IP regardless of the cached IP.")
@click.option('--quiet', '-q', is_flag=True, help="Don't print to stdout.")
@click.option('--nocolour', is_flag=True, help="Don't colourise messages to stdout.")
def main(config, force, quiet, nocolour):
    # Define an echo function to account for 'quiet' and 'nocolour'
    def echo(msg):
        if quiet:
            pass
        elif nocolour:
            print(msg)
        else:
            godaddy_ddns.print_colourised(msg)

    # Notify if forced
    if force:
        echo("Info: Beginning forced update.")

    # Perform the update
    try:
        # Catch and record warnings to print later
        with warnings.catch_warnings(record=True) as caught_warnings:
            updated, myip, domains = godaddy_ddns.update_ip(config, force)
    except (godaddy_ddns.ConfigError,
            godaddy_ddns.BadResponse,
            PermissionError,
            ConnectionError) as e:
        # Echo the message and exit with failure
        echo(str(e))
        sys.exit(1)
    except Exception:
        echo("Error: An unexpected exception occurred!")
        raise  # raise the exception for debugging/issue reporting

    # Print any warnings
    for warning in caught_warnings:
        echo(str(warning.message))

    # Report the status of the update
    if updated:
        forced = "forcefully " if force else ""
        for domain in domains:
            echo("Success: IP address {}updated to {} for {}.".format(forced, myip, domain))
    else:
        echo("Success: IP address is already up-to-date ({})".format(myip))


if __name__ == "__main__":
    main()
